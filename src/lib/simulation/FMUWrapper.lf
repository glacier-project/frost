target Python

import FrostBase from "../FrostBase.lf"

reactor FMUWrapper(file_path = "", step = 1000) extends FrostBase{

    preamble{=
        import fmpy
        import fmpy.fmi3 as fmi
    =}
    state fmu
    state fmu_time = 0.0
    state unzipdir
    state model_description
    state vars = []
    logical action doStep

    reaction(startup) -> doStep {=
        '''
        Initialize the FMU by extracting it, reading the model description and schedule the first step.
        '''
        self.unzipdir = self.fmpy.extract(self.file_path)
        self.model_description = self.fmpy.read_model_description(self.unzipdir)
        self.fmu = self.fmpy.instantiate_fmu(self.unzipdir, self.model_description)
        self.fmu.enterInitializationMode()
        self.fmu.exitInitializationMode()
        for variable in self.model_description.modelVariables:
            self.vars.append(variable.valueReference)
        doStep.schedule(SEC(0))
    =}

    reaction(doStep){=
        '''
        Perform a step in the FMU, retrieve output values, and schedule the next step.
        '''
        assert self.fmu != None, "FMU is not present"

        self.fmu.doStep(currentCommunicationPoint = self.fmu_time, communicationStepSize = self.step)
        self.fmu_time += self.step
    =}

    reaction(shutdown){=
        '''
        Free the FMU instance and clean up resources.
        '''
        if self.fmu is None:
            return 0

        self.fmu.terminate()
        self.fmu.freeInstance()
        self.fmu = None          
    =}
}