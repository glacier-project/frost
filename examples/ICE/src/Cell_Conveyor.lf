target Python 

import FrostMachine from "../../../frost/FrostMachine.lf"
import Conveyor from "Conveyor/conveyor.lf"

preamble{=
    from enum import Enum
    class bay_value(Enum):
        LoadUnloadZone = 5
        Bay1 = 1
        Bay2 = 2
        Bay3 = 3
        Bay4 = 4
=}

reactor Cell_Conveyor extends FrostMachine{
    //PALLETS
    state pallet_1 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet1") =}
    state pallet_2 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet2") =}
    state pallet_3 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet3") =}
    state pallet_4 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet4") =}
    state pallet_5 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet5") =}
    state pallet_6 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet6") =}
    state pallet_7 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet7") =}
    state pallet_8 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet8") =}
    state pallet_9 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet9") =}
    state pallet_10 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet10") =}
    //BAYES
    state LUBay = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Bayes/LoadUnloadZone") =}
    state Bay1 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Bayes/Bay1") =}
    state Bay2 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Bayes/Bay2") =}
    state Bay3 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Bayes/Bay3") =}
    state Bay4 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Bayes/Bay4") =}
    
    //METHODS
    state setPalletDestination = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/setDestination") =}
    state release = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/release") =}
    state setPalletDestinationWithReservation = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/setPalletDestinationWithReservation") =}
    state callFreePalletTo = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/callFreePalletTo") =}
    state callFreePalletToWithReservation = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/callFreePalletToWithReservation") =}
    state callFreePalletOfTypeTo = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/callFreePalletOfTypeTo") =}
    state callFreePalletOfTypeToWithReservation = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/callFreePalletOfTypeToWithReservation") =}
    state reservePallet = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/reservePallet") =}
    state releasePallet = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/releasePallet") =}
    state setPartOnPallet = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/setPartOnPallet") =}
    state clearPartOnPallet = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/clearPartOnPallet") =}

    //DESTINATIONS
    state destinations_folder = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorDataExchange/Destinations") =}
    //COMMANDS
    state command = {= self.data_model.get_node("Cell_Conveyor/command") =}    
    //LocalVariables
    state pallets = {= [self.pallet_1, self.pallet_2, self.pallet_3, self.pallet_4, self.pallet_5, self.pallet_6, self.pallet_7, self.pallet_8, self.pallet_9, self.pallet_10] =}
    state bayes = {= {5: self.LUBay, 11:self.Bay1, 21:self.Bay2, 31:self.Bay3, 41:self.Bay4} =}    
    state out = {=self.data_model.get_node("Cell_Conveyor/output")=}
    state dict_bay = {= {
                        0:21,
                        1:31, 
                        2:41, 
                        3:5,
                        4:41,
                        5:31,
                        6:21,
                        7:11
                    } =}

    conveyor = new Conveyor()
    logical action check
    state dict_bay_conveyor = {= {
                        1:"Z",
                        2:"P", 
                        3:"O", 
                        4:"N",
                        5:"G",
                    } =}
    logical action delay
    state messages_to_conveyor = {=[]=}
    reaction(check) -> conveyor.from_frost{=
        if self.messages_to_conveyor:
            conveyor.from_frost.set(self.messages_to_conveyor.pop(0))
            check.schedule(0)
        else:
            check.schedule(SEC(1))
    =}

    reaction(conveyor.to_frost){=

        """        
        Handles the command received from the conveyor system and updates the pallet positions accordingly.
        The conveyor system object that contains the command and list of pallets.
        """
        cmd = conveyor.to_frost.value[0]
        lst = conveyor.to_frost.value[1]
        print("Received command from conveyor:", cmd, lst)
        if cmd == 1:
            if lst[1] == 5:
                self.LUBay.get_property("IndexPosition").get_property("palletNum").value  = lst[0]
            elif lst[0] == 1:
                self.Bay1.get_property("PalletPosition1").get_property("palletNum").value = lst[1]
            elif lst[0] == 2:
                self.Bay2.get_property("PalletPosition" + lst[1][1]).get_property("palletNum").value = lst[1][0]
            elif lst[0] == 3:
                self.Bay3.get_property("PalletPosition" + lst[1][1]).get_property("palletNum").value = lst[1][0]
            elif lst[0] == 4:
                self.Bay4.get_property("PalletPosition" + lst[1][1]).get_property("palletNum").value = lst[1][0]
        elif cmd == 7:
            if lst[0] == 5:
                self.LUBay.get_property("IndexPosition").get_property("palletNum").value = 0         
            elif lst[0] == 1:
                self.Bay1.get_property("PalletPosition1").get_property("palletNum").value = 0
            elif lst[0] == 2:
                self.Bay2.get_property("PalletPosition" + str(lst[1])).get_property("palletNum").value = 0
            elif lst[0] == 3:
                self.Bay3.get_property("PalletPosition" + str(lst[1])).get_property("palletNum").value = 0
            elif lst[0] == 4:
                self.Bay4.get_property("PalletPosition" + str(lst[1])).get_property("palletNum").value = 0
        self.out.value = True
    =}
    
    method setPalletDest(palletNumber, destination){=
        """
        Sets the destination of a pallet and sends a command to the conveyor system.
        :param palletNumber: The number of the pallet to set the destination for.
        :param destination: The destination to set for the pallet.
        :return: The destination as a string.
        """
        pallet = self.pallets[palletNumber-1]
        (pallet.get_property("destination")).value =  destination
        res = str(destination)
        if destination != 5:
            self.command.write("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Bayes/Bay" + res[0] + "/PalletPosition" + res[1] + "/palletNum")
        else:
            self.command.write("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Bayes/LoadUnloadZone/IndexPosition/palletNum")
        temp1 = destination
        temp2 = ""
        if temp1 != 5:
            temp1 = destination / 10
            temp2 = str(destination % 10)
        letter = self.dict_bay_conveyor[int(temp1)]
        self.messages_to_conveyor.append([1, [palletNumber, str(letter + temp2)]])
        return res
    =}
    
    method releaseP(palletNumber){=
        """
        Releases a pallet by sending a command to the conveyor system.
        :param palletNumber: The number of the pallet to be released.
        :return: True if the pallet was successfully released, False otherwise.
        """
        pallet = self.pallets[palletNumber-1]
        dest = pallet.get_property("destination").value
        res = str(dest)
        if dest != 5:
            self.command.write("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Bayes/Bay" + res[0] + "/PalletPosition" + res[1] + "/palletNum")
        else:
            self.command.write("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Bayes/LoadUnloadZone/IndexPosition/palletNum") 
        self.messages_to_conveyor.append([7, [palletNumber]])
        return True
    =}
    
    reaction(startup)-> check{=
        """
        Initializes the Cell_Conveyor reactor, setting up the initial state and scheduling the first check.
        """
        check.schedule(SEC(1))
        self.setPalletDestination.callback = self.setPalletDest
        self.release.callback = self.releaseP
    =}
    
}