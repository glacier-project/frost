/**
 * A traffic light model based on
 * Lee & Seshia Chapter 3.4, Example 3.9.
 */
 target Python{
    fast: True,
    files: [
        ../../config/utils/l_formatter.py, 
        ../../config/utils/time_utils.py, 
        ../../config/utils/singleton_meta.py, 
        ../../config/utils/g_preamble.py, 
        ../../config/utils/handle_recipe.py
    ],
}
preamble{=
    from g_preamble import *
=}
reactor _TrafficLight {


    input pedestrian
    output sigR
    output sigG
    output sigY
    state count = 0
    state _mode = 0
    logical action resetCount
    timer t(0, 1 sec)
    
    reaction(startup) {=
        self._mode = 0
        self.count = 58
    =}
    reaction(t) pedestrian -> sigR, sigG, sigY, resetCount {=
        if (self._mode == 0):
            if self.count >= 60:
                sigG.set(1)
                resetCount.schedule(0)
            else :
                self.count += 1
            
        
        elif (self._mode == 1):
            if (pedestrian.is_present):
                if (self.count >= 60) :
                    sigY.set(1)
                    resetCount.schedule(0)
                else:
                    self.count += 1
                
            else:
                self.count += 1
            
        
        elif (self._mode == 2):
            if (self.count >= 5):
                sigR.set(1)
                resetCount.schedule(0)
            else:
                self.count += 1
        else:
            if (self.count >= 60):
                sigY.set(1)
                resetCount.schedule(0)
            else:
                self.count += 1
    =}

    reaction(resetCount) {=
        self.count = 0
    =}
}
 
reactor Pedestrian {
    output out
    state count= 0
    timer t(1 sec, 10 sec)

    reaction(t) -> out {=
        out.set(1)
        self.count += 1
        if (self.count == NUM_RUNS):
            lf.request_stop()
        
    =}
}
 
main reactor {

    preamble{=
        handler = logging.StreamHandler()
        handler.setFormatter(LFormatter(lf.time.logical_elapsed, TimeFormat.MSECS))
        logger = logging.getLogger()
        logger.setLevel(logging.ERROR)
        logger.addHandler(handler)
    =}
    
    t = new _TrafficLight()
    p = new Pedestrian()
    p.out -> t.pedestrian
}